#include <iostream>
#include <TCanvas.h>
#include <TROOT.h>
#include <TApplication.h>
#include <TH1F.h>

#include "MediumMagboltz.hh"
#include "FundamentalConstants.hh"
#include "ComponentAnalyticField.hh"
#include "GeometrySimple.hh"
#include "SolidTube.hh"
#include "Sensor.hh"
#include "AvalancheMC.hh"
#include "ViewSignal.hh"
#include "Plotting.hh"
#include "ViewCell.hh"

using namespace Garfield;

/*
This will be used to simulate an electron avalanche in a micromegas detector.
requires precalculation of a .gas file, one is included.


last changed May 18, 2017
roosa@nscl.msu.edu
*/

int main(int argc, char * argv[]){
  //set the measurements of the detector
  //len=>cm
  double len_drift = 40; 
  double len_aval = 100.e-4; 
  double diameter = 15;
  //voltages (V)
  double v_drift = 5000;
  doubel v_aval = 300;

  
  //TApplication makes the outputs work as if it were run from root.
  // Create and setup the geometry.
  TApplication app("app", &argc, argv);
  plottingEngine.SetDefaultStyle();

  //load in the gas data
  MediumMagboltz* gas =new MediumMagboltz();
  gas->LoadGasFile("ar_93_co2_7.gas");

  //declare the analytic field, and the geometry
  ComponentAnalyticField* cmp = new ComponentAnalyticField();
  GeometrySimple* geo = new GeometrySimple();


  //make tube
  //set the dimensions of the tube/wire, all in [cm] 
  double r_tube = diameter/2;
  double halflen_tube = (len_drift+len_aval)/2;

  //insert tube declaration here

  //put gas in the tube
  geo->AddSolid(tube,gas);

  //pass the geometry into the component field
  cmp->SetGeometry(geo);


  //now make the electric field
  //set voltages

  double v_wire = 3270;
  double v_tube = 0;


  //place tube with radius r_tube, voltage v_tube, n=0 edges (cylinder) and, labled "t"
  cmp->AddTube(r_tube, v_tube, 0, "t");
  /*
  //get the signal in the wire
  cmp->AddReadout("s");

  
  //make to a sensor and add component field
  Sensor* sensor = new Sensor();
  sensor->AddComponent(cmp);
  sensor->AddElectrode(cmp,"s");


  //set the time period (ns), step and binning for the sensor 
  double time_min = 0;
  double time_max = 2;
  double time_step = 0.02;
  int ntime_bins = int((time_max-time_min)/time_step);

  sensor->SetTimeWindow(time_min, time_step, ntime_bins);
  
  //now we want to simulate electron avalanches
  //declare the avalanch and give it the sensor we defined
  AvalancheMC* aval = new AvalancheMC();
  aval->SetSensor(sensor);
  
  //turn on signal calculations and set time step
  aval->EnableSignalCalculation();
  aval->SetTimeSteps(.05);

  //place an avalance electron slightly off the wire and simulate
  //make a randomized placement system
  double x0 = 0.;
  double y0 = r_wire + 100.e-4;
  double z0 = 0.;
  double t0 = 0.;
  
  aval->AvalancheElectron(x0, y0, z0, t0);


  //plot current induced in the wire

  ViewSignal* signal_view = new ViewSignal();

  
  signal_view->SetSensor(sensor);
  signal_view->PlotSignal("s");
  */

  
  //look at the geometry
  // Create a viewer.
  ViewCell* view = new ViewCell();
  // Set the pointer to the component.
  view->SetComponent(cmp);
  // Make a two-dimensional plot of the cell layout.
  view->Plot3d();


  app.Run(kTRUE);
  
}
